rexmpp - a reusable XMPP IM client library

The goal is to produce a library reusable from different languages
(via C FFI), without hijacking an event loop, requiring any specific
one, or otherwise restricting a user, and fairly feature-rich. The
motivation for that is multitude of clients using custom and
incomplete XMPP implementations, occasionally even failing to deliver
one-to-one textual messages.

The exact scope is yet to be determined, but it shouldn't implement or
rely on any particular UI, should be flexible and not stay in the way
of implementing additional XEPs on top of it, and should try to make
it easy to implement a decent client application using it.

Current dependencies: libxml2 or libexpat, libgcrypt. Optionally
gsasl, libunbound or c-ares, gnutls with gnutls-dane or openssl,
icu-i18n, gpgme, curl, libnice (with glib), libsrtp2. For use of the
alternative Rust implementations, rustc and cargo, with libc and errno
Rust libraries.


A rough roadmap:


- Basic protocol:

[+] XMPP core (RFC 6120). Mostly ready, though would be nice to
    review and refactor.


- Reliable and predictable message delivery:

[+] XEP-0198 v1.6: Stream Management. Implemented (both acknowledgements
    and resumption, making use of XEP-0203 v2.0: Delayed Delivery).
[+] XEP-0280 v0.13: Message Carbons.


- Better connectivity:

[+] "Happy Eyeballs" (RFC 8305).
[+] XEP-0368 v1.1: SRV records for XMPP over TLS (when built with
    libunbound or c-ares).
[+] SOCKS5 (RFC 1928) support. Implemented, though no authentication.
[+] XEP-0199 v2.0: XMPP Ping.
[.] Certificate verification using DANE (experimental, only when built
    with GnuTLS).
[+] DNSSEC checks (when built with libunbound).


- Library refinement:

[.] Doxygen documentation.
[.] Texinfo manual.
[.] Proper JID handling (RFC 7622).
[+] Abstraction of the used XML, SASL, TLS, and DNS libraries, and
    optional usage of alternative ones.
[.] Automated testing.
[.] Alternative module implementations in Rust.


- IM features:

[+] XMPP IM (RFC 6121): roster management (loading and pushes, with
    versioning and caching)
[+] XEP-0030 v2.5: Service Discovery (replying to queries, recursively
    searching for features)
[+] XEP-0115 v1.5: Entity Capabilities (including into initial presence)
[+] XEP-0092 v1.1: Software Version
[+] XEP-0172 v1.1: User Nickname
[+] XEP-0373 v0.6: OpenPGP for XMPP
[+] XEP-0402 v1.1: PEP Native Bookmarks (autojoin conferences)
[+] XEP-0363 v1.0: HTTP File Upload (when built with curl)
[+] XEP-0166 v1.1: Jingle
[+] XEP-0234 v0.19: Jingle File Transfer (sending and accepting, but
    no requests and no ranged transfers)
[+] XEP-0261 v1.0: Jingle In-Band Bytestreams Transport Method
[+] XEP-0167 v1.2: Jingle RTP Sessions (relaying RTP packets over an
    encrypted channel to/from local UDP ports, for use with external
    players and streamers)
[+] XEP-0176 v1.1: Jingle ICE-UDP Transport Method (uses libnice,
    discovers TURN/STUN servers with XEP-0215: External Service
    Discovery)
[+] XEP-0320 v1.0: Use of DTLS-SRTP in Jingle Sessions (uses gnutls
    and libsrtp2)
[ ] XEP-0260: Jingle SOCKS5 Bytestreams Transport Method?
[ ] XEP-0391: Jingle Encrypted Transports?
[ ] XEP-0184: Message Delivery Receipts?
[ ] OTR/OMEMO/MLS encryption?


- Additional state tracking:

[+] XMPP IM (RFC 6121): track presences of contacts.
[+] XEP-0163 v1.2: Personal Eventing Protocol: track contacts'
    published items.
[+] IQ response caching.
[ ] XEP-0030: Service Discovery: track features provided by known
    entities?
[ ] XEP-0115: Entity Capabilities: maintain a capability database,
    track capabilities of known entities?
[ ] XEP-0045: Multi-User Chat: tracking of related states/presences?


- Various utility functions:

[+] Display name establishment.
[+] A console module.
[+] XEP-0060 v1.19: Publish-Subscribe: helper functions.


- Examples and application:

[+] Basic usage example.
[.] WeeChat plugin.
[+] Emacs mode (and an XML-based interface). See emacs/README.
